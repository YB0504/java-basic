---- 날짜와 시간 ----
!! 모든 날짜 클래스는 불변이므로 변경이 발생한다면 새로운 객체를 생성해서 반환값을 꼭 받아야 한다.
1. 기본 날짜와 시간 - LocalDateTime
 - LocalDate: 날짜만 표현할 때 사용, 년월일을 다룬다.
 - LocalTime: 시간만을 표현할 때 사용, 시분초를 다룬다.
 - LocalDateTime: 위 두 개를 합한 개념
** Local이 붙는 이유는 세계 시간대를 고려하지 않고 타임존이 적용되지 않기 때문이다.
 - 특정 지역의 날짜와 시간만 고려할 때 사용한다.

** isEqual(), equals()
 - isEqual()는 단순히 비교 대상이 시간적으로같으면 true를 반환한다.
   객체가 다르고, 타임존이 달라도 시간적으로 같으면 true
   - 서울의 9시와 UTC의 0시는 시간적으로 같으므로 true
 - equals()는 객체의 타입, 타임존 등등 내부 데이터의 모든 구성요소가 같아야 true
   - 서울의 9시와 UTC의 0시는 시간적으로 같지만 타임존의 데이터가 다르기 때문에 false를 반환한다.

2. ZonedDateTime
 a. ZoneId
    - ZoneID.systemDefault(): 시스템이 사용하는 기본 ZoneId를 반환
    - ZoneID.of(): 타임존을 직접 제공해서 ZoneId를 반환
      - ZoneId는 내부에 일광 절약 시간 관련 정보, UTC와의 오프셋 정보를 포함하고 있다.
 b. ZonedDateTime: 시간대를 고려한 날짜와 시간을 표현할 때 사용 타임존이 포함된다.
    - 시간대를 고려해야할 때 실제 사용하는 날짜와 시간 정보를 나타내는데 적합하다.

3. OffsetDateTime: 시간대를 고려한 날짜와 시간을 표현할 때 사용하는 것은 같지만 타임존이 없고
   UTC로 부터의 시간대 차이인 고정된 오프셋만 포함한다.
   - LocalDateTime에 UTC 오프셋 정보인 ZoneOffset이 합쳐진 것
   - UTC로 부터의 고정된 오프셋만을 고려할 때 유용하다.

!! ZonedDateTime vs OffsetDateTime
 - ZonedDateTime은 구체적인 지역 시간대를 다룰 때 사용하며, 일광 절약 시간을 자동으로 처리할 수 있다.
   사용자 지정 시간대에 따른 시간 계산이 필요할 때 적합하다.
 - OffsetDateTime은 UTC와의 시간 차이만을 나타낼 때 사용하며, 지역 시간대의 복잡성을 고려하지 않는다.
   시간대 변환 없이 로그를 기록하고, 데이터를 저장하고 처리할 때 적합하다.
 - ZonedDateTime과 OffsetDateTime은 글로벌 서비스를 하지 않으면 잘 사용하지 않는다.

4. Year, Month, YearMonth, MonthDay
 - 자주 사용하지 않지만 년, 월, 년월, 달일을 각각 다룰때 사용한다.

5. Instant
 - 기계 중심의 시간
 - UTC를 시준으로 하는 시간의 한 지점을 나타낸다.
 - 날짜와 시간을 나노초 정밀도를 표현하며 1970년 1월 1일 0시 0분 0초(UTC)를 기준으로 경과한 시간으로 계산된다.
** 장점
 - 시간대 독립성: Instant는 UTC를 기준으로 하므로, 시간대에 영향을 받지 않는다.
   이는 전세계 어디서나 동일한 시점을 가리키는데 유용하다.
 - 고정된 기준점: 모든 Instant는 1970년 1월 1일 UTC를 기준으로 하기 때문에,
   시간 계산 및 비교가 명확하고 일관된다.
** 단점
 - 사용자 친화적이지 않음: Instant는 기계적인 시간처리에는 적합하지만,
   사람이 읽고 이해하기에는 직관적이지 않다. 날짜, 시간을 계산하고 사용하는데 필요한 기능이 부족하다.
 - 시간대 정보 부재: Instant에는 시간대 정보가 포함되어 있지 않아,
   특정 지역의 날짜와 시간으로 변환하려면 추가적인 작업이 필요하다.

6. Period, Duration
** 시간의 개념 2가지 **
 - 특정 시점의 시간(시각)
   - 정확한 날짜나 시간
 - 시간의 간격(기간)
   - 3년 간, 3개월 간 처럼 기간을 표현
   - Period와 Duration은 시간의 간격을 표현하는데 사용된다.
 a. Period: 두 날짜 사이의 간격을 년, 월, 일 단위로 나타낸다.
 b. Duration: 두 시간 사이의 간격을 시, 분, 초(나노초) 단위로 나타낸다.






