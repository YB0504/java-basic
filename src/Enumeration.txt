---- 열거형 ----
** 열거형이란 말그대로 어떤 항목을 나열하는 것을 뜻한다.
 1. 열거형이 만들어진 이유
  - String 클래스 사용 시 타입 안정성 부족 문제
    - 값의 제한 부족: String 클래스로 상태나 카테고리를 표현하면, 잘못된 문자열을 실수로 입력할 가능성이 있다.
      "Monday:, "Tuesday"등을 나타내는 데 String을 사용한다면 오타나 잘못된 값이 입력될 위험
    - 컴파일 시 오류 감지 불가: 이러한 잘못된 값은 컴파일 시에는 감지되지 않고,
      런타임에서만 문제가 발견되기 때문에 디버깅이 어려워질 수 있다.
 2. 문자열 상수의 사용
  - String 클래스 사용보다 코드가 명확해진다.
    실수로 상수의 이름을 잘못 입력한다면 컴파일 시점에 오류가 발생하여 쉽고 빠르게 찾을 수 있다.
  - 그러나 String 타입의 상수는 어떤 문자열이든 입력할 수 있다는 단점이 있다.
    그리고 다른 개발자가 문자열 상수를 사용하지 않고 직접 문자열을 사용해도 막을 방법이 없다.

---- 타입 안전 열거형 패턴 ----
 - 타입 안전 열거형 패턴을 사용하면 앞서 사용한 String 열거형과는 다르게
   개발자가 나열한 항목만 안전하게 사용할 수 있다.
 1. 클래스를 만들고 상수를 선언한다.
 2. 이때 상수마다 별도의 인스턴스를 생성하고, 생성한 인스턴스를 대입한다.
 3. 상수로 선언하기 위해 static, final 키워드를 사용한다.
  - static 키워드를 사용해서 상수를 메소드 영역에 선언한다.
  - final 키워드를 사용해서 인스턴스(참조값)를 변경할 수 없게 한다.
 4. 외부에서 상수가 있는 클래스로 객체 생성을 하지 못하도록
    private 생성자로 막아준다.

** 장점
 - 타입 안정성 향상: 전해진 객체만 사용할 수 있기 때문에 잘못된 값의 입력을 미연에 방지한다.
 - 데이터 일관성: 정해진 객체만 사용하므로 데이터의 일관성이 보장된다.
 - 제한된 인스턴스 생성: 클래스는 사전에 정의된 몇개의 인스턴스만 생성하고
   외부에서는 해당 인스턴스들만 사용할 수 있도록 한다.
 - 타입 안정성: 타입 안전 열거형 패턴을 사용하면, 잘못된 값이 할당되거나 사용되는 것을 컴파일 시점에 방지할 수 있다.

** 단점
 - 이 패턴을 구현하려면 많은 코드를 작성해야 한다.
 - private 생성자를 추가하는 등 유의해야 하는 부분이 많다.

---- 열거형 Enum Type ----
** "Enumeration"은 일련의 명명된 상수들의 집합을 정의하는 것을 의미한다.
 1. class 대신 enum 타입을 사용한다.
 2. 원하는 상수의 이름을 나열한다.
 3. 열거형도 클래스이다.
  - 열거형은 자동으로 "java.lang.Enum"을 상속 받는다.
  - 외부에서 임의로 생성할 수 없다.
 4. toString()가 오버라이딩 되어있으므로 직접 참조값을 확인할 수 없다.
  - 참조값을 확인하려면 System.identityHashCode()를 사용
 5. switch case 문에도 사용할 수 있다.

** 장점
 - 타입 안정성 향상: 열거형은 사전에 정의된 상수들로만 구성되므로, 유효하지 않은 값이 입력될 가능성이 없다.
 - 간결성 및 일관성: 열거형을 사용하면 코드가 더 간결하고 명확해지며, 데이터의 일관성이 보장된다.
 - 확장성: 새로운 타입을 추가하고 싶을때 ENUM 에 새로운 상수를 추가하기만 하면 된다.
 참고: 열거형은 "static import"를 사용할 수 있기 때문에 더 가독성 좋은 코드를 만들 수 있다.