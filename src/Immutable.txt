---- 기본형과 참조형의 공유 ----
1. 기본형: 하나의 값을 여러 변수에서 절대로 공유하지 않는다.
2. 참조형: 하나의 객체를 참조값을 통해 여러 변수에서 공유할 수 있다.

---- 공유참조와 사이드 이펙트 ----
1. 사이드 이펙트: 프로그래밍에서 어떤 계산이 주된 작업 외에 추가적인 부수 효과를 일으키는 것
 - 사이드 이펙트가 발생하게 되면 디버깅이 어려워지고 코드의 안정성이 저하될 수 있다.
 - 사이드 이펙트를 방지하기 위해서는 각각의 변수가 서로 다른
   인스턴스를 참조하도록 신규 객체를 생성하여 값을 할당하면 된다.
** 그러나 여러 변수가 하나의 객체를 공유하지 않도록 강제로 막을 방법이 없다.

---- 불변 객체의 도입 ----
!! 사이드 이펙트를 방지하기 위해서는 객체의 값을 변경하지 못하게 설계하는 것
 - 사이드 이펙트의 근본적인 원인은 객체의 공유가 아닌 공유된 객체의 값을 변경했기 때문!
** 객체의 상태(객체 내부의 값, 필드, 멤버 변수)가 변하지 않는 객체를 불변 객체(Immutable Object)라 한다.
 - 불변이라는 간단한 제약으로 사이드 이펙트를 미연에 방지할 수 있다.
 - 불변 객체의 값을 변경하고 싶다면 새로운 불변 객체를 생성하여야 한다.

---- 불변 객체의 값 변경 ----
** 불변 객체의 값을 변경하기 위해서는 해당 객체를 반환하는 메소드를 만들고
   결과를 바탕으로 새로운 객체를 만들어 반환하도록 하면 된다.
!! 불변 객체에서 값을 변경하는 메소드들은 반드시 반환값이 있어야 한다.

참고 - withXXX()
 - 불변 객체에서 값을 변경하는 경우 withXXX처럼 with로 시작하는 경우가 많다.
 - 불변 객체의 메소드가 with로 지어진 경우, 그 메소드가 지정된 수정사항을
   포함하는 객체의 새 인스턴스를 반환한다는 사실을 뜻한다.
 - with는 관례처럼 사용되는데 원본 객체가 유지됨을 강조하면서 변경사항을
   새 복사본에 포함! 하는 과정을 표현한다.