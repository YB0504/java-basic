----- 자바 메모리 구조 -----
1. 메소드 영역
: 클래스 정보를 보관한다.(붕어빵 틀)
프로그램을 실행하는데 필요한 공통 데이터를 관리하며 프로그램의 모든 영역에서 관리한다.
 - 클래스 정보: 클래스의 실행 코드, 필드, 메소드, 생성 자 코드등 모든 실행코드가 존재
 - static 영역: static 변수들을 보관
 - 런타임 상수 풀: 프로그램을 실행하는데 필요한 공통 리터럴 상수를 보관
 프로그램을 효율적으로 관리하기 위한 상수들을 관리한다.
 (문자열을 다루는 문자열 풀은 자바7부터 힙 영역으로 이동)

2. 스택 영역
: 실제 프로그램이 실행되는 영역, 메소드를 실행할 때 마다 하나씩 쌓인다.
자바 실행 시, 하나의 실행 스택이 생성된다. 각 스택 프레임은 지역 변수, 중간 연산 결과, 메소드 호출 정보등을 포함한다.
 - 스택 프레임: 스택 영역에 쌓이는 네모 박스가 하나의 스택 프레임

3. 힙 영역
: 객체가 생성되는 영역, new 명령어를 사용하면 사용된다.(붕어빵 틀로부터 생성된 붕어빵이 존재하는 공간)
객체와 배열이 생성되는 영역, 가비지 컬렉션이 이루어지는 주요영역이다.

A. 메소드 코드는 메소드 영역에
메소드는 인스턴스마다 공통된 코드를 공유하므로 객체가 생성되더라도
인스턴스 변수는 메모리가 새로 할당되지만, 메소드는 새롭게 할당되지 않는다.
인스턴스의 메소드를 호출하면 실제로는 메소드 영역에 있는 코드를 불러서 수행한다.

----- 스택과 큐 -----
1. Stack 구조
 - 후입 선출(LIFO) 형태: 마지막에 들어간 내용이 먼저 실행된다.

2. Queue 구조
 - 선입 선출(FIFO) 형태: 먼저 넣은 내용이 가장 먼저 실행된다.
 ex) 선착순 이벤트를 한다고 가정할 때 고객이 대기해야 한다면 큐 자료 구조를 사용해야 한다.