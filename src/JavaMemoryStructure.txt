----- 자바 메모리 구조 -----
1. 메소드 영역
: 클래스 정보를 보관한다.(붕어빵 틀)
프로그램을 실행하는데 필요한 공통 데이터를 관리하며 프로그램의 모든 영역에서 관리한다.
 - 클래스 정보: 클래스의 실행 코드, 필드, 메소드, 생성 자 코드등 모든 실행코드가 존재
 - static 영역: static 변수들을 보관
 - 런타임 상수 풀: 프로그램을 실행하는데 필요한 공통 리터럴 상수를 보관
 프로그램을 효율적으로 관리하기 위한 상수들을 관리한다.
 (문자열을 다루는 문자열 풀은 자바7부터 힙 영역으로 이동)

2. 스택 영역
: 실제 프로그램이 실행되는 영역, 메소드를 실행할 때 마다 하나씩 쌓인다.
자바 실행 시, 하나의 실행 스택이 생성된다. 각 스택 프레임은 지역 변수, 중간 연산 결과, 메소드 호출 정보등을 포함한다.
 - 스택 프레임: 스택 영역에 쌓이는 네모 박스가 하나의 스택 프레임

3. 힙 영역
: 객체가 생성되는 영역, new 명령어를 사용하면 사용된다.(붕어빵 틀로부터 생성된 붕어빵이 존재하는 공간)
객체와 배열이 생성되는 영역, 가비지 컬렉션이 이루어지는 주요영역이다.

A. 메소드 코드는 메소드 영역에
메소드는 인스턴스마다 공통된 코드를 공유하므로 객체가 생성되더라도
인스턴스 변수는 메모리가 새로 할당되지만, 메소드는 새롭게 할당되지 않는다.
인스턴스의 메소드를 호출하면 실제로는 메소드 영역에 있는 코드를 불러서 수행한다.

----- 스택과 큐 -----
1. Stack 구조
 - 후입 선출(LIFO) 형태: 마지막에 들어간 내용이 먼저 실행된다.

2. Queue 구조
 - 선입 선출(FIFO) 형태: 먼저 넣은 내용이 가장 먼저 실행된다.
 ex) 선착순 이벤트를 한다고 가정할 때 고객이 대기해야 한다면 큐 자료 구조를 사용해야 한다.

----- static 키워드 -----
1. static 키워드는 주로 멤버 변수와 메소드에 사용된다.
2. 멤버변수 앞에 static을 사용하게되면 static변수, 정적 변수, 클래스 변수라고 한다.
3. static이 붙은 멤버 변수는 메소드 영역에서 관리한다.
 - static 변수를 사용할 때는 변수가 있는 클래스명.static변수의 형태가 되야하지만
   같은 클래스 내에서 사용하면 생략해도 된다.
4. static 변수는 클래스가 관리하는 변수이다. 예를 들면 붕어빵은 여러개지만
   붕어빵 틀은 1개이므로 클래스 변수인 static 변수도 하나만 존재한다.
5. static의 접근 방법
 - 인스턴스를 통한 접근: 가능하지만 권장하지 않는다.
   - 이유: 인스턴스 변수를 사용하는 것처럼 보여 코드의 가독성이 떨어진다.
 - 클래스를 통한 접근

----- 멤버 변수(필드)의 종류 -----
1. 인스턴스 변수
 - static이 붙지 않은 멤버 변수는 인스턴스를 생성해야 사용할 수 있고,
   인스턴스에 소속되어 있다.
 - 인스턴스 변수는 인스턴스를 만들 때 마다 새로 만들어진다.
2. 클래스 변수
 - 클래스 변수, 정적 변수, static 변수 등으로 부르며 모든 용어를 다 사용한다.
 - static이 붙은 멤버 변수는 인스턴스와 무관하게 클래스에 바로 접근해서 사용할 수 있고,
   클래스 자체에 소속되어 있으므로 클래스 변수라 한다.
 - 클래스 변수는 자바 프로그램을 시작할 때 딱 1개가 만들어지며 인스턴스와는 다르게
   보통 여러곳에서 공유하는 목적으로 사용된다.

----- 변수와 생명주기 -----
1. 지역 변수(매개 변수 포함)
 - 지역 변수는 스택 영역에 보관된다. 메소드가 종료되면 함께 제거된다.
2. 인스턴스 변수
 - 인스턴스에 있는 멤버 변수로 힙 영역에 보관된다. 힙 영역은 GC가 발생하기 전까지
   생존하기 때문에 지역 변수보다는 생존 주기가 길다.
3. 클래스 변수
 - 메소드 영역의 static 영역에 보관되는 변수이다. 메소드 영역은 프로그램 전체에서
   사용하는 공용 공간이다. 클래스 변수는 해당 클래스가 JVM에 로딩되는 순간 생성되며
   JVM이 종료될 때까지 제거 되지 않고 살아 있다.
 - static 변수가 정적 변수인 이유가 바로 위에 있다.
   인스턴스 변수는 동적으로 생성되고 제거되지만 static인 정적 변수는 거의
   프로그램 실행 시점에 만들어 지고 종료 시점에 제거되는 정적으로 생성된다.

