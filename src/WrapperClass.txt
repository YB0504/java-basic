---- 기본형의 한계 ----
1. 자바는 객체 지향 언어이다. 그러나 자바 안에는 객체가 아닌 것이 있다.
   바로 int, double 같은 기본형이다
   - 객체가 아님: 기본형 데이터는 객체가 아니기 때문에, 객체 지향 프로그래밍의 장점을 살릴 수 없다.
     예를 들어 객체는 유용한 메소드를 제공할 수 있는데, 기본형은 객체가 아니므로 메소드를 제공할 수 없다.
   - null 값을 가질 수 없음: 기본형 데이터 타입은 null 값을 가질 수 없다. 때로는 데이터가 없음이라는
     상태를 나타내야 할 필요가 있는데, 기본형은 항상 값을 가지기 때문에 이런 표현을 할 수 없다.
     - null을 반환하는 경우 NullPointerException을 발생 시킬 수 있다.

---- Java의 래퍼 클래스 ----
- 기본형을 객체로 만든 형태
  - 자바가 제공하는 기본 래퍼 클래스는 두 가지 특징을 가진다.
  1. 불변
  2. equals()로 비교해야 한다.(객체 형태이기 때문)

---- 래퍼 클래스 생성 - Boxing ----
1. 기본형을 래퍼클래스로 변경하는 것을 박싱(Boxing)이라 한다.
2. valueOf()는 내부적으로 new Integer(10)과 같은 래퍼 클래스 객체를 생성하여 돌려준다.
3. Integer.valueOf()는 성능 최적화 기능이 있다.(-128 ~ 127 사이의 Integer 클래스를 미리 생성해준다.)
 - 마치 문자열 풀과 비슷하게 자주 사용하는 숫자를 미리 생성해두고 재사용한다.

---- Unboxing ----
1. 래퍼 클래스에 들어있는 기본형 값을 다시 꺼내는 메소드
2. 비교는 equals()를 사용한다.
 - 래퍼 클래스는 객체
 - 내부의 값을 비교할 수 있도록 equals()를 재정의 해두었다.

---- Autoboxing ----
 - 개발자들이 기본형 -> 래퍼, 래퍼 -> 기본형으로 변환하는 것이 너무 잦았다.
 - 자바는 1.5부터 오토 박싱, 오토 언박싱을 지원한다.
 - 컴파일러가 개발자 대신 valueOf(), xxxValue()등의 코드를 추가해주는 기능이다.

---- Wrapper 클래스의 주요 메소드 ----
1. valueOf(): 래퍼 타입 반환, 숫자, 문자열 모두 지원
2. parseXXX(): 문자열을 기본형으로 변환
3. compareTo(): 내 값과 인수로 넘어온 값을 비교, 크면 1, 같으면 0, 작으면 -1을 반환
4. 산술연산 메소드
 - Integer.sum(), min(), max(): static 메소드이다. 간단한 덧셈, 작은 값, 큰 값 연산을 수행

---- parseInt() vs valueOf() ----
 - valueOf()는 래퍼 타입을 반환
 - parseXXX()는 기본형을 반환
   - 그렇기 때문에 원하는 타입에 맞는 메소드를 사용하면 된다.
   - parseXXX()는 각 타입마다 존재한다.

---- 기본형, 래퍼 클래스의 사용 ----
 - CPU 연산을 아주 많이 수행하는 특수한 경우이거나, 수만~수십만 이상 연속해서 연산을
   수행해야하는 경우라면 기본형을 사용하여 최적화를 고려하자
 - 그렇지 않은 일반적인 경우라면 코드를 유지보수하기 쉬운 Wrapper 클래스로 고려하는 것이 좋다.