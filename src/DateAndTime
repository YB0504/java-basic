---- 날짜와 시간 ----
!! 모든 날짜 클래스는 불변이므로 변경이 발생한다면 새로운 객체를 생성해서 반환값을 꼭 받아야 한다.
1. 기본 날짜와 시간 - LocalDateTime
 - LocalDate: 날짜만 표현할 때 사용, 년월일을 다룬다.
 - LocalTime: 시간만을 표현할 때 사용, 시분초를 다룬다.
 - LocalDateTime: 위 두 개를 합한 개념
** Local이 붙는 이유는 세계 시간대를 고려하지 않고 타임존이 적용되지 않기 때문이다.
 - 특정 지역의 날짜와 시간만 고려할 때 사용한다.

** isEqual(), equals()
 - isEqual()는 단순히 비교 대상이 시간적으로같으면 true를 반환한다.
   객체가 다르고, 타임존이 달라도 시간적으로 같으면 true
   - 서울의 9시와 UTC의 0시는 시간적으로 같으므로 true
 - equals()는 객체의 타입, 타임존 등등 내부 데이터의 모든 구성요소가 같아야 true
   - 서울의 9시와 UTC의 0시는 시간적으로 같지만 타임존의 데이터가 다르기 때문에 false를 반환한다.

2. ZonedDateTime
 - ZonedDateTime: 시간대를 고려한 날짜와 시간을 표현할 때 사용 타임존이 포함된다.
   - 시간대를 고려해야할 때 실제 사용하는 날짜와 시간 정보를 나타내는데 적합하다.
 - OffsetDateTime: 시간대를 고려한 날짜와 시간을 표현할 때 사용하는 것은 같지만 타임존이 없고
   UTC로 부터의 시간대 차이인 고정된 오프셋만 포함한다.
   - UTC로 부터의 고정된 오프셋만을 고려할 때 유용하다.

3. Year, Month, YearMonth, MonthDay
 - 자주 사용하지 않지만 년, 월, 년월, 달일을 각각 다룰때 사용한다.

4. Instant
 - UTC를 시준으로 하는 시간의 한 지점을 나타낸다.
 - 날짜와 시간을 나노초 정밀도를 표현하며 1970년 1월 1일 0시 0분 0초(UTC)를 기준으로 경과한 시간으로 계산된다.

5. Period, Duration
** 시간의 개념 2가지 **
 - 특정 시점의 시간(시각)
   - 정확한 날짜나 시간
 - 시간의 간격(기간)
   - 3년 간, 3개월 간 처럼 기간을 표현
 - Period: 두 날짜 사이의 간격을 년, 월, 일 단위로 나타낸다.
 - Duration: 두 시간 사이의 간격을 시, 분, 초(나노초) 단위로 나타낸다.