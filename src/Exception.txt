---- 예외 처리 ----
1. 예외 계층
 - 예외 처리 키워드
   - try, catch, finally, throw, throws
 - Object: 모든 예외의 최상위 부모는 Object
 - Throwable: 최상위 예외 하위에 Exception, Error 클래스가 있다.
   - Error: 메모리 부족, 시스템 오류 등과 같이 애플리케이션에서 복구가 불가능한 시스템 예외
     애플리케이션 개발자는 이 예외를 잡으려고 해서는 안된다.
   - Exception: 체크 예외
     - 애플리케이션 로직에서 사용할 수 있는 실질적 최상위 예외
     - Exception 과 그 하위 예외는 모두 컴파일러가 체크하는 체크 예외이다.
       * 단 RuntimeException 은 예외로 한다.
   - RuntimeException: 언체크 예외
     - 컴파일러가 체크 하지 않는 언체크 예외
     - RuntimeException 과 그 자식 예외는 모두 언체크 예외이다.
     - 이름을 따서 런타임 예외라고도 부른다.

2. 체크 예외 vs 언체크 예외
 - 체크 예외: 발생한 예외를 개발자가 명시적으로 처리해야 하며
   그렇지 않으면 컴파일 오류가 발생한다.
 - 언체크 예외: 개발자가 명시적으로 처리하지 않아도 된다.
* 주의
 - 상속 관계는 예외 처리에서도 적용되는데 애플리케이션 로직에서 Throwable 예외는 잡으면 안된다.
   - Error 예외도 함께 잡힐 수도 있기 때문에 애플리케이션 로직은 Exception 부터 잡아낸다고 생각해야 한다.

3. 예외 기본 규칙
 * main -> service -> client(예외 발생) 예외 던지기 -> service 예외 처리 -> main으로 정상 흐름 반환
 - 예외를 처리하지 못하면 자신을 호출한 곳으로 예외를 던진다.

 * 예외 처리의 2가지 기본 규칙
 1. 예외는 잡아서 처리하거나 밖으로 던져야 한다.
 2. 예외를 잡거나 던질 때 지정한 예외 뿐만 아니라 그 예외의 자식들도 함께 처리할 수 있다.
  - Exception 예외를 catch 하면 그 하위 예외도 모두 잡을 수 있다.
  - Exception 예외를 throw 로 던지면 그 하위 예외도 모두 던질 수 있다.
  * 예외를 처리하지 못하고 계속 던지면?
    - main() 밖으로 예외를 던지면 예외 로그를 출력하면서 시스템이 종료된다.

4. 예외 클래스 만들기
 - 예외 클래스를 만들려면 예외를 상속 받으면 된다.
 - throw 예외 라고 사용하면 새로운 예외를 발생 시킨다.
   - 예외도 객체이기 때문에 new로 생성하고 발생 시켜야 한다.
 - throws 예외는 발생시킨 예외를 메소드 밖으로 던질 때 사용한다.
 - 체크 예외는 예외를 잡지 않으면 항상 throws 키워드를 사용해야 하지만
   언체크 예외는 생략할 수 있다.
 * 언체크 예외의 장단점
   - 장점: 신경쓰고 싶지 않은 예외를 무시할 수 있다.
   체크 예외의 경우 처리할 수 없는 예외를 밖으로 던지려면 항상 throw 예외를 선언해야 하지만
   언체크 예외는 이 부분을 생략할 수 있다.
   - 단점: 언체크 예외는 개발자가 실수로 예외를 누락할 수 있다.
   반면에 체크 예외는 컴파일러를 통해 예외 누락을 잡아준다.

5. finally
 - try ~ catch ~ finally 구조는 정상 흐름, 예외 흐름, 마무리 흐름을 제공한다.
   - try 블럭이 동작한다면 finally 블럭은 무조건 호출된다.
   - 심지어 try ~ catch 블럭에서 못 잡는 예외가 발생해도 finally 블럭은 반드시 호출된다.
   - 사용한 자원을 항상 반환할 수 있도록 보장해준다.
   - 정상 흐름과 예외 흐름을 분리하여 코드의 가독성을 좋게 해준다.

6. try ~ with ~ resources
 - 리소스 누수 방지: 모든 리소스가 제대로 닫히도록 보장한다.
   - 실수로 finally 블럭을 적지 않거나 블럭 안에서 자원 해제 코드를 누락하는 문제를 예방한다.
 - 코드 간결성 및 가독성 향상: 명시적인 close() 호출이 필요 없어 코드가 더 간결하고 읽기 쉬워진다.
 - 스코프 범위 한정: 리소스로 사용되는 변수의 스코프가 try 블럭 안으로 한정된다.
   - 코드의 유지 보수가 쉬워진다.
 - 조금 더 빠른 자원 해제: try-catch-finally 방식은 catch 이후에 자원을 반납했다.
   try with resources 방식은 try 블럭이 끝나면 즉시 close()를 호출한다.