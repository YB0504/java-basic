java.lang 패키지의 대표적인 클래스
1. Object: 모든 자바 객체의 부모 클래스
2. String: 문자열 클래스
3. Integer, Long, Double: Wrapper Type, 기본형 데이터 타입을 객체로 만든 것
4. Class: 클래스 메타 정보
5. System: 시스템과 관련된 기본 기능들을 제공
-- 자바의 기본을 이루는 클래스이다. --

java.lang 의 특징
1. Import 생략 가능

---- Object Class ----
1. Object는 항상 모든 클래스의 최상위 클래스
2. 상속받는 클래스가 없다면 묵시적으로 Object 클래스를 상속받는다.
 - 명시적으로 상속받는 클래스가 있다면 Object 클래스를 상속받지 않는다.
3. Object 클래스를 묵시적으로 상속받으면 메모리에도 함께 생성된다.

!! 자바에서 Object 클래스가 최상위 부모 클래스인 이유
1. 공통 기능 제공
 - 객체의 정보를 제공: toString()
 - 객체가 다른 객체와 같은지 비교: equals()
 - 객체가 어떤 클래스로 만들어졌는지 확인: getClass()
2. 다형성의 기본 구현

---- 다형성의 기본 구현 ----
1. Object 클래스는 다형성을 지원하는 기본적인 메커니즘을 제공한다.
2. 서로 타입이 다른 객체들을 어딘가에 보관할 때 Object 클래스는 모두 담을 수 있다.

---- toString() ----
** 기본적으로 패키지를 포함한 객체의 이름과 객체의 참조값(해시코드)을 16진수로 제공한다.
 - toString()만으로는 객체의 상태를 모두 나타낼 수 없다.
   - 보통 toString()을 오버라이딩하여 더 자세한 정보를 제공하도록 하는 것이 일반적이다.
   - Object 타입의 매개변수로 객체가 전달되면 먼저 Object 클래스에 toString()을 찾는다.
   - 이때 자식 클래스에 오버라이딩된 toString()이 있는지 찾고 없다면 Object 클래스의 toString()을 실행한다.
 - toString()이나 hashCode()를 오버라이딩하면 객체의 참조값을 출력할 수 없게된다.
   - 이때 Integer.toHexString(System.identityHashCode()); 를 사용하면 된다.

---- Object, OCP ----
** Object 클래스와 toString()이 없다면 각각의 클래스마다 별도의 메소드로 작성해야 할 것이다.
1. 구체적인 것에 의존
 - 만약 구체적인 클래스가 늘어나면 늘어나는 만큼 메소드도 늘어나게 되버린다.

2. 추상적인 것에 의존
 - Object 클래스는 추상적인 것에 의존한다.
 - 여기서 추상적은 Animal, Dog, Cat 처럼 Animal 같은 부모 클래스로 올라갈수록 개념이 추상적이게 된다는 뜻

3. 다형적 참조
 - Object 타입을 매개변수로 사용하여 모든 객체 인스턴스를 인수로 받을 수 있다.

4. 메소드 오버라이딩
 - Object 클래스는 모든 클래스의 부모이다.
 - 따라서 그 하위의 모든 클래스는 toString()을 오버라이딩할 수 있고 호출할 수 있다.

** OCP 원칙
1. Open
 - 새로운 클래스를 추가하고 toString()을 오버라이딩하여 기능을 확장할 수 있다.
2. Closed
 - 새로운 클래스를 추가해도 Object 클래스와 toString()을 사용하는 클라이언트 코드는 변경하지 않아도 된다.
!! 이렇듯 다형적 참조, 메소드 오버라이딩, 클라이언트 코드가 구체적인 하위 클래스가 아닌
   추상적인 Object 클래스에 의존하면서 OCP 원칙을 지킬 수 있다.

---- 정적, 동적 의존관계 ----
1. 정적 의존관계
 - 정적 의존관계는 컴파일 시간에 결정되며, 주로 클래스 간의 관계를 의미한다.
 - 프로그램을 실행하지 않고, 클래스 내에서 사용하는 타입들마 보면 쉽게 의존관계를 파악할 수 있다.

2. 동적 의존관계
 - 동적 의존관계는 프로그램을 실행하는 런타임에 확인할 수 있다.
 - 매개변수로 어떤 객체가 전달되는지 프로그램을 실행해봐야 알 수 있다.