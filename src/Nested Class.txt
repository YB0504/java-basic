---- 중첩 클래스 ----
* 중첩 클래스란
 - 클래스 안에 클래스를 중첩해서 정의 하는 것

* 중첩 클래스의 종류
 - 정적 중첩 클래스: static 키워드 사용
   - 정적 변수와 같은 위치
   - 바깥 클래스 안에 있지만 관계 없는 전혀 다른 클래스
   - 바깥 클래스의 private 접근 제어자에 접근할 수 있다는 것 이외에는 서로 다른 클래스 2개를 만든 것과 같다.
   - 나의 클래스에 포함된 중첩 클래스가 아니라 다른 곳에 있는 중첩 클래스에 접근할 때는
     바깥클래스.중첩클래스로 접근해야 한다.
 - 내부 클래스
   - 바깥 클래스의 내부에 있으면서 클래스를 구성하는 요소
   - 내부 클래스는 외부클래스의 인스턴스 참조.new 내부클래스()로 생성할 수 있다.
   - 외부클래스의 인스턴스 참조.new 내부클래스()로 생성한 내부 클래스는 개념상 외부 클래스의 인스턴스 내부에 생성된다.
     따라서 바깥 클래스의 인스턴스를 먼저 생성해야 내부 클래스의 인스턴스를 생성할 수 있다.
   - 내부 클래스
     - 인스턴스 변수와 같은 위치
     - 바깥 클래스의 인스턴스 멤버에 접근할 수 있다.
   - 지역 클래스
     - 내부 클래스의 특징 + 지역 변수에 접근할 수 있다.
     - 지역 변수와 같은 위치
     - 지역 변수와 같이 코드 블럭 안에서 클래스를 정의한다.
   - 익명 클래스
     - 지역 클래스의 특징 + 클래스의 이름이 없는 특별한 클래스
 * 중첩 클래스를 정의하는 위치는 변수의 선언 위치와 같다.
 - 핵심은 바깥 클래스 입장에서 안에 있는 클래스가 인스턴스에 소속이 되는가의 차이

* 중첩 클래스의 사용 시점
 - 특정 클래스가 다른 하나의 클래스 안에서만 사용되거나 둘이 긴밀하게 연결되어 있는 특별한 경우
   - 외부의 여러 클래스가 특정 중첩 클래스를 사용한다면 중첩 클래스로 만들면 안된다.

* 중첩 클래스의 사용 이유
 - 논리적 그룹화: 특정 클래스가 다른 하나의 클래스 안에서만 사용되는 경우 해당 클래스 안에 포함되는 것이
   논리적으로 더 그룹화 된다. 패키지를 열었을 때 다른 곳에서 사용될 필요가 없는 중첩 클래스가
   외부에 노출되지 않는 장점도 있다.
 - 캡슐화: 중첩 클래스는 바깥 클래스의 private 멤버에 접근할 수 있다.
   불필요한 public 메소드를 제거할 수 있게 된다.
