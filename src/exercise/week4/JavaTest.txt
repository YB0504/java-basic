1. Java의 '예외'와 '에러'에 대해 설명하세요.

 - 예외: 치명적이지 않은 오류로 사용자의 입력, 데이터베이스의 누락 등으로 이루어져 있으며 예외처리를 통해 미연에 방지할 수 있다.
 - 에러: 메모리 부족 처럼 치명적인 시스템 문제로 복구할 수 없는 오류, JVM 내에서 보통 발생하며 개발자가 처리 불가능하다.

2. 다음 중 옳은 설명을 모두 고르세요.

a. Exception 클래스와 RuntimeException 클래스 모두 메서드 선언부에 반드시 포함되어야 한다. x
b. Exception 클래스는 체크 예외에, RuntimeException 클래스는 언체크 예외에 사용된다. o
c. 런타임 예외는 일반적으로 프로그래머의 오류로 인해 발생하며, 컴파일 타임에 감지되지 않는다. o
d. Exception은 RuntimeException의 상위 클래스이며, RuntimeException은 모든 예외를 다룰 수 있다.x
 - RuntimeException은 언체크 예외로 체크예외인 Exception 클래스의 예외 클래스를 다룰 수 없다.
e. 런타임 예외는 메모리 부족이나 네트워크 연결 오류 같은 하드웨어 또는 시스템 문제에서 사용된다. x
 - 예외가 아닌 에러의 내용이다. 개발자가 해결할 수 없다.


3. 다음 중 옳은 설명을 모두 고르세요.

a. 체크 예외는 Error 클래스에서 파생되지 않는다. o
b. 언체크 예외는 Error 클래스에서 파생된다. x
 - Exception과 Error는 아예 다른 클래스 이다.
c. finally 블록의 목적 중 하나는, 중단되었거나 완료된 try 블록 또는 catch 블록이 사용한 자원을 회수하는 것이다. o
d. 체크 예외는 반드시 try-catch 블록에서 처리하거나, 메소드가 해당 예외를 던지도록 선언해야 한다. o
e. 예외가 발생하면 JVM은 해당 예외에 대응하는 catch 블록을 찾아 해당 블록 안의 예외 처리 코드를 무시하고 다음 코드를 실행한다. x
 - catch 블록 내부의 코드를 처리하고 프로그램을 종료한다.
 - finally가 존재한다면 finally 내부의 코드를 실행한다.